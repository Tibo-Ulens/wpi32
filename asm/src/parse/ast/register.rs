//! AST register type definitions

use crate::lex::TokenType;

#[derive(Clone, Debug)]
pub(crate) enum Register {
	R0,
	R1,
	R2,
	R3,
	R4,
	R5,
	R6,
	R7,
	R8,
	R9,
	R10,
	R11,
	R12,
	R13,
	R14,
	R15,
	R16,
	R17,
	R18,
	R19,
	R20,
	R21,
	R22,
	R23,
	R24,
	R25,
	R26,
	R27,
	R28,
	R29,
	R30,
	R31,
}

impl<'s> From<TokenType<'s>> for Register {
	fn from(value: TokenType<'s>) -> Self {
		match value {
			TokenType::RegR0 => Self::R0,
			TokenType::RegR1 => Self::R1,
			TokenType::RegR2 => Self::R2,
			TokenType::RegR3 => Self::R3,
			TokenType::RegR4 => Self::R4,
			TokenType::RegR5 => Self::R5,
			TokenType::RegR6 => Self::R6,
			TokenType::RegR7 => Self::R7,
			TokenType::RegR8 => Self::R8,
			TokenType::RegR9 => Self::R9,
			TokenType::RegR10 => Self::R10,
			TokenType::RegR11 => Self::R11,
			TokenType::RegR12 => Self::R12,
			TokenType::RegR13 => Self::R13,
			TokenType::RegR14 => Self::R14,
			TokenType::RegR15 => Self::R15,
			TokenType::RegR16 => Self::R16,
			TokenType::RegR17 => Self::R17,
			TokenType::RegR18 => Self::R18,
			TokenType::RegR19 => Self::R19,
			TokenType::RegR20 => Self::R20,
			TokenType::RegR21 => Self::R21,
			TokenType::RegR22 => Self::R22,
			TokenType::RegR23 => Self::R23,
			TokenType::RegR24 => Self::R24,
			TokenType::RegR25 => Self::R25,
			TokenType::RegR26 => Self::R26,
			TokenType::RegR27 => Self::R27,
			TokenType::RegR28 => Self::R28,
			TokenType::RegR29 => Self::R29,
			TokenType::RegR30 => Self::R30,
			TokenType::RegR31 => Self::R31,
			_ => unreachable!(),
		}
	}
}
