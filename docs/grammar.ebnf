(*
	THIS IS ONLY A LOOSE REFERENCE

	IT WILL CONTAIN MISTAKES AND WILL NOT MATCH THE IMPLEMENTATION GRAMMAR
	ONE FOR ONE
*)

(* Lexical grammar *)

newline = ?r"\n"?;
whitespace = ?r"\s"?;

comma = { " " | "\t" }, ",", { " " | "\t" };

comment = ";", { ?r"[^\n]*"? };

string = '"', { ?r'[^"]'? | '\"' }, '"';
char = "'", ( ?r"[^']"? | "\'" ), "'";
number = decimal_number
	| hex_number
	| octal_number
	| binary_number;

decimal_number = ?r"[0-9]+"?;
hex_number = "0x", ?r"[a-fA-F0-9]+"?;
octal_number = "0o", ?r"[0-7]+"?;
binary_number = "0b", ?r"[0-1]+"?;

identifier = ?XID_START?, { ?XID_CONTINUE? };
identifier_or_keyword = identifier | instruction_kw | directive_kw;

(* Syntactical grammar *)

root = [ preamble ], { section };
preamble = { preamble_line };
section = section_header, { line };

preamble_line =
	{ whitespace },
	[ preamble_statement ],
	[ comment ],
	newline;

preamble_statement = const_directive | macro_definition;

section_header = "#SECTION", section_name, newline;
section_name = ".TEXT" | ".DATA" | ".BSS";

line =
	{ whitespace },
	[ statement ],
	[ comment ],
	newline;

statement =
	macro_definition
	| macro_invocation
	| labeled_block
	| directive
	| instruction;

macro_definition =
	"define_macro", "!",
	identifier,
	macro_body;
macro_body =
	( "(", macro_rule, { comma, macro_rule }, ")" )
	| ( "[", macro_rule, { comma, macro_rule }, "]" )
	| ( "{", macro_rule, { comma, macro_rule }, "}" );

macro_rule = macro_matcher, "=>", macro_transcriber, newline;

macro_matcher =
	"(", { macro_match } ")"
	| "[", { macro_match } "]"
	| "{", { macro_match } "}";
macro_match =
	?tokentype?
	| ( "$", identifier, ":", macro_arg_type )
	| ( "$", "(", ( macro_match, { macro_match } ), ")", macro_var_type );
macro_arg_type = "inst", "reg", "dir", "ident", "imm", "stmt";
macro_var_type = "?" | "+" | "*";

macro_transcriber =
	( "(", { token }, ")" )
	| ( "[", { token }, "]" )
	| ( "{", { token }, "}" );

macro_invocation =
	identifier, "!",
	| ( "(", { token }, ")" )
	| ( "[", { token }, "]" )
	| ( "{", { token }, "}" );

labeled_block = identifier, "{", { line }, "}";

directive =
	bytes_directive
	| halves_directive
	| words_directive
	| res_bytes_directive
	| res_halves_directive
	| res_words_directiv
	| const_directive;

bytes_directive = "#BYTES", literal, { comma, literal };
halves_directive = "#HALVES", literal, { comma, literal };
words_directive = "#WORDS", literal, { comma, literal };

res_bytes_directive = "#RES_BYTES", number, { comma, number };
res_halves_directive = "#RES_HALVES", number, { comma, number };
res_words_directive = "#RES_WORDS", number, { comma, number };

const_directive = "#CONST", identifier, literal;

literal = string | char | immediate;

immediate = logicor_imm, { "?", logicor_imm, ":", logicor_imm };
logicor_imm = logicxor_imm, { "||", logicxor_imm };
logicxor_imm = logicand_imm, { "^^", logicand_imm };
logicand_imm = or_imm, { "&&", or_imm };
or_imm = xor_imm, { "|", xor_imm };
xor_imm = and_imm, { "^", and_imm};
and_imm = eq_imm, { "&", eq_imm};
eq_imm = ord_imm, { ( "==", ord_imm ) | ( "!=", ord_imm ) };
ord_imm =
	ord_imm,
	{
		("<", shift_imm )
		| ( "<=", shift_imm)
		| ( ">", shift_imm )
		| ( ">=", shift_imm )
	};
shift_imm =
	addsub_imm,
	{
		( "<<", addsub_imm )
		| ( ">>", addsub_imm )
		| ( ">>>", addsub_imm )
	};
addsub_imm =
	muldivrem_imm,
	{
		( "+", muldivrem_imm )
		| ( "-", muldivrem_imm )
	};
muldivrem_imm =
	unary_imm,
	{
		( "*", unary_imm )
		| ( "/", unary_imm )
		| ( "%", unary_imm )
	};
unary_imm = [ "+" | "-" | "!" | "~" ], operand;

operand = label | local_label | number | ( "(", immediate, ")" );

address_calculation = "[", register, [ address_offset ] "]";
address_offset = "+" | "-", immediate;

instruction =
	integer_register_immediate_instruction
	| integer_register_register_instruction
	| upper_immediate_instruction
	| jump_instruction
	| jump_register_instruction
	| branch_instruction
	| load_instruction
	| store_instruction
	| memory_ordering_instruction
	| environment_instruction
	| fence_instruction
	| csr_register_instruction
	| csr_immediate_instruction
	| multiply_instruction
	| divide_instruction
	| remainder_instruction;

register =
	"r0" | "r1" | "r2" | "r3" | "r4" | "r5" | "r6" | "r7" | "r8" | "r9" | "r10"
	| "r11" | "r12" | "r13" | "r14" | "r15" | "r16" | "r17" | "r18" | "r19"
	| "r20" | "r21" | "r22" | "r23" | "r24" | "r25" | "r26" | "r27" | "r28"
	 "r29" | "r30" | "r31"
	| "zero" | "ra" | "sp" | "gp" | "tp" | "fp"
	| "t0" | "t1" | "t2" | "t3" | "t4" | "t5" | "t6"
	| "s0" | "s1" | "s2" | "s3" | "s4" | "s5" | "s6" | "s7" | "s8" | "s9"
	| "s10" | "s11"
	| "a0" | "a1" | "a2" | "a3" | "a4" | "a5" | "a6" | "a7";

integer_register_immediate_instruction =
	( "addi" | "slti" | "sltiu" | "andi" | "ori" | "xori" | "lsli" | "lsri" | "asri" ), whitespace,
	register, comma,
	register, comma,
	immediate;

integer_register_register_instruction =
	( "add" | "slt" | "sltu" | "and" | "or" | "xor" | "lsl" | "lsr" | "asr" | "sub" ), whitespace,
	register, comma,
	register, comma,
	register;

upper_immediate_instruction =
	( "lui" | "auipc" ), whitespace,
	register, comma,
	immediate;

jump_instruction = "jal", comma, register, comma, immediate;

jump_register_instruction =
	"jalr", whitespace,
	register, comma,
	register, comma,
	immediate;

branch_instruction =
	( "beq" | "bne" | "blt" | "bltu" | "bge" | "bgeu" ), whitespace,
	register, comma,
	register, comma,
	immediate;

load_instruction =
	( "lb" | "lbu" | "lh" | "lhu" | "lw" ), whitespace,
	register, comma,
	address_calculation;

store_instruction =
	( "sb", "sh", "sw" ), whitespace,
	register, comma,
	address_calculation;

memory_ordering_instruction =
	( "fence", whitespace, ordering_operation, comma, ordering_operation )
	| total_store_ordering_instruction;
ordering_operation = [ "i" ], [ "o" ], [ "r" ], [ "w" ];
total_store_ordering_instruction = "fence.tso";

environment_instruction = ( "ecall" | "ebreak" );

fence_instruction = "fence.i";

csr_register_instruction =
	( "csrrw"  | "csrrs" | "csrrc" ), whitespace,
	register, comma,
	register, comma,
	register;

csr_immediate_instruction =
	( "csrrwi"  | "csrrsi" | "csrrci" ), whitespace,
	register, comma,
	immediate, comma,
	register;

multiply_instruction =
	( "mul" | "mulh" | "mulhu" | "mulhsu" ), whitespace,
	register, comma,
	register, comma,
	register;

divide_instruction =
	( "div" | "divu" ), whitespace,
	register, comma,
	register, comma,
	register;

remainder_instruction =
	( "rem" | "remu" ), whitespace,
	register, comma,
	register, comma,
	register;
